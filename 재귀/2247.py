# 아래 방식은 전체를 다 탐사하기 때문에 시간초과가 발생한다.
# b = [["*"] * a for _ in range(a)]

# mc = int(a ** (1 / 3))
# def recursion(i, j, cnt):
#     global mc
#     if cnt == mc:
#         return
#     c, d = i // (3 ** cnt), j // (3 ** cnt )
#     e, f = c % 3, d % 3
#     if e == 1 and f == 1:
#         b[i][j] = " "
#     if c >= 3 or d >= 3:
#         recursion(i, j, cnt + 1)


# for i in range(a):
#     for j in range(a):
#         recursion(i,j,0)

# for bc in b:
#     print(*bc)

# 그렇다면 어떻게 해야할까?
# 확인가능한 것은 3X3 정사각형으로 9가지의 패턴이 반복된다는 것
# 첫줄은 3칸 모두 입력 , 둘째 줄은 가운데만 빔, 셋째 줄은 모두 입력
# 고민거리는 최초 시작점은 어떻게 설정하고 재귀의 반복횟수가 늘어날 수록 변형된 내용물을 어떻게 적용시키는 가였다.

def recursion(x):
    # 기준을 세워보기로 한다.
    # 문제가 성립하려면 (nx3)x(nx3) 정사각형을 성립해야 하므로
    # 최소값을 3으로 생각하자
    # 이때 각 경우에 들어가는 인자는 "*" 이다
    # 그렇다면 3일때 무엇이 나와야할까? 항상 같은 값이 나와야 기준으로 성립하기에 고정값으로 집어넣자
    if x == 3:
        # 문제에 제시된 기본값
        return ["***", "* *", "***"]
        # 위 리스트를 출력했을 경우
        # ***
        # * *
        # ***
        # 가 나온다.
    # 이로써 3일 경우에는 답이 나왔다.
    # 이제 다음 차수를 구해보자
    # 조건과 정사각형이 동시에 성립하려면 3의 배수가 되어야한다
    # 다음 차수는 9이다
    # 하지만 9일때 어떻게 각 경우에 들어가는 인자는 무엇일까?
    # 제시된 결과 값은 아래와 같다.
    # 아래 결과물을 위에서 제시된 3x3형식으로 잘라보자
    # * * * * * * * * *                * * * | * * * | * * *
    # *   * *   * *   *                *   * | *   * | *   *  
    # * * * * * * * * *                * * * | * * * | * * *
    # * * *       * * *                ---------------------
    # *   *       *   *                * * * |       | * * *
    # * * *       * * *                *   * |       | *   *  
    # * * * * * * * * *                * * * |       | * * *
    # *   * *   * *   *                ---------------------
    # * * * * * * * * *                * * * | * * * | * * *
    #                                  *   * | *   * | *   *  
    #                                  * * * | * * * | * * *
    # 공통된 인자는 x = 3일 때 나온 결과값이다
    # 이를 x = 3일때와 같은 방식으로 출력해보자
    # 차수를 반복할 때마다 새로운 리스트를 만들어준다.
    ans = []
    # 들어갈 인자는 이전 차수의 결과값이므로
    inja = recursion(x // 3)
    # 그리고 결과값을 그리려면 첫째줄, 둘째줄, 셋째줄을 따로 그려줘야한다.
    # 이 때 결과값은 ["***","* *","***"] 형식으로 저장되어있다.
    # 첫째줄 각 인자가 3번씩 들어간다.
    for i in inja:
        ans.append(i * 3)
    # 둘째줄 각 인자가 가운데 빼고 다 들어간다.
    for i in inja:
        # 이때 빈칸의 길이는 현재 차수의 3분의 1이다
        ans.append(i + ' ' * (x // 3) + i)
    # 셋째줄 각 인자가 3번씩 들어간다.
    for i in inja:
        ans.append(i * 3)
    # 위 과정이 끝나면 결과값을 보내준다.
    return ans


a = int(input())
answer = recursion(a)
for i in answer:
    print(i)